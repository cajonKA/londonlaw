./doc/manual.tex:the hostname or IP address of the machine hosting the game server, provide a username
./doc/manual.tex:username and password).  The server may also be shut down and restarted without loss of
./doc/manual.html:the hostname or IP address of the machine hosting the game server, provide a username
./doc/manual.html:username and password). The server may also be shut down and restarted without loss of
./doc/readme.protocol:the username is in use, or if the password is incorrect.)
./doc/readme.protocol:The server will broadcast chat messages to all clients (both username and
./doc/readme.protocol:   S: "* chatall \"username\" \"message\""
./doc/ChangeLog:                     Tooltip username labels for the map window are now more
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "That username is in use."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "username:"
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno de Sr. X (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno del Agente Rojo (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno del Agente Amarillo (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno del Agente Verde (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno del Agente Azul (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgstr "Es el turno del Agente Negro (%(username)s)."
./londonlaw/locale/es/LC_MESSAGES/es.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/es/LC_MESSAGES/londonlaw.mo
Übereinstimmungen in Binärdatei ./londonlaw/locale/af/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "That username is in use."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "username:"
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/af/LC_MESSAGES/af.po:msgid "You must enter a valid username."
./londonlaw/locale/londonlaw.pot:msgid "That username is in use."
./londonlaw/locale/londonlaw.pot:msgid "username:"
./londonlaw/locale/londonlaw.pot:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/londonlaw.pot:msgid "You must enter a valid username."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "That username is in use."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "username:"
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/sv/LC_MESSAGES/sv.po:msgid "You must enter a valid username."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "That username is in use."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "username:"
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/pl/LC_MESSAGES/pl.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/pl/LC_MESSAGES/londonlaw.mo
Übereinstimmungen in Binärdatei ./londonlaw/locale/el/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "That username is in use."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "username:"
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Mr. X (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Κόκκινου Αστυνομικού (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Κίτρινου Αστυνομικού (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Πράσινου Αστυνομικού (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Μπλε Αστυνομικού (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgstr "Είναι η σειρά του Μαύρου Αστυνομικού (%(username)s)."
./londonlaw/locale/el/LC_MESSAGES/el.po:msgid "You must enter a valid username."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "That username is in use."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "username:"
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "Herra X:n vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "On punaisen Etsivän vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "On Keltaisen Etsivän vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "On Vihreän Etsivän vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "On Sinisen Etsivän vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgstr "On Mustan Etsivän vuoro (%(username)s)."
./londonlaw/locale/fi/LC_MESSAGES/fi.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/fi/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "That username is in use."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "username:"
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/nb/LC_MESSAGES/nb.po:msgid "You must enter a valid username."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "That username is in use."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "username:"
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgstr "username :"
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/fr/LC_MESSAGES/fr.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/fr/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "That username is in use."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "username:"
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Mr. X ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Der rote Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Der gelbe Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Der grüne Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Der blaue Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgstr "Der schwarze Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/de/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "That username is in use."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "username:"
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Mr. X ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Der rote Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Der gelbe Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Der grüne Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Der blaue Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgstr "Der schwarze Detektiv ist an der Reihe.(%(username)s)."
./londonlaw/locale/de/LC_MESSAGES/de.po~:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/de/LC_MESSAGES/de.mo
Übereinstimmungen in Binärdatei ./londonlaw/locale/it/LC_MESSAGES/londonlaw.mo
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "That username is in use."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "username:"
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno di Mr. X (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno del Detective Rosso (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno del Detective Giallo (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno del Detective Verde (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno del Detective Blu (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "E' il turno del Detective Nero (%(username)s)."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgid "You must enter a valid username."
./londonlaw/locale/it/LC_MESSAGES/it.po:msgstr "Devi inserire uno username valido."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "That username is in use."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "username:"
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is Mr. X's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "de beurt is aan Mr. X (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is the Red Detective's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "Het is de beurt aan de rode detective (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is the Yellow Detective's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "Het is de beurt aan de gele detective (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is the Green Detective's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "Het is de beurt aan de groene detective (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is the Blue Detective's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "Het is de beurt aan de blauwe detective (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "It is the Black Detective's turn (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgstr "Het is de beurt aan de zwarte detective (%(username)s)."
./londonlaw/locale/nl/LC_MESSAGES/nl.po:msgid "You must enter a valid username."
Übereinstimmungen in Binärdatei ./londonlaw/locale/nl/LC_MESSAGES/londonlaw.mo
./londonlaw/aiclients/base.py~:      self._username = self.factory.username
./londonlaw/aiclients/base.py~:      self.sendTokens(self.genTag(), "login", self._username, self._password)
./londonlaw/aiclients/base.py~:      if p.getPlayer() == self._username:
./londonlaw/aiclients/base.py~:      username = args[0].decode("utf-8")
./londonlaw/aiclients/base.py~:      if username in self._players:
./londonlaw/aiclients/base.py~:         self._players.remove(username)
./londonlaw/aiclients/base.py~:   def __init__(self, username, password, gameroom, team):
./londonlaw/aiclients/base.py~:      self.username = username
./londonlaw/aiclients/detective_simple.py:   def __init__(self, username, gameroom):
./londonlaw/aiclients/detective_simple.py:      base.BaseAIFactory.__init__(self, username, username, gameroom, "Detectives")
./londonlaw/aiclients/x_simple.py:   def __init__(self, username, gameroom):
./londonlaw/aiclients/x_simple.py:      base.BaseAIFactory.__init__(self, username, username, gameroom, "Mr. X")
./londonlaw/aiclients/base.py:      self._username = self.factory.username
./londonlaw/aiclients/base.py:      self.sendTokens(self.genTag(), "login", self._username, self._password)
./londonlaw/aiclients/base.py:      if p.getPlayer() == self._username:
./londonlaw/aiclients/base.py:      username = args[0].decode("utf-8")
./londonlaw/aiclients/base.py:      if username in self._players:
./londonlaw/aiclients/base.py:         self._players.remove(username)
./londonlaw/aiclients/base.py:   def __init__(self, username, password, gameroom, team):
./londonlaw/aiclients/base.py:      self.username = username
./londonlaw/server/Game.py~:# Vocabulary: a 'player' is a username.  GameRegistry.registry.getClient(player) is the
./londonlaw/server/Game.py~:#             Protocol instance associated with that username, if one exists.
./londonlaw/server/Game.py~:   def syncPlayer(self, username):
./londonlaw/server/Game.py~:         if self._listeners[listener] == username:
./londonlaw/server/Protocol.py:   "player"  : client has provided a username, but has not joined a game
./londonlaw/server/Protocol.py:      self._username        = None
./londonlaw/server/Protocol.py:#               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username.encode("utf-8"), args[0])
./londonlaw/server/Protocol.py:               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username, args[0])
./londonlaw/server/Protocol.py:         for player in self._game.getTeam(self._username).getPlayers():
./londonlaw/server/Protocol.py:#               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username.encode("utf-8"), args[0])
./londonlaw/server/Protocol.py:               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username, args[0])
./londonlaw/server/Protocol.py:#         username = args[0].decode("utf-8")
./londonlaw/server/Protocol.py:         username = args[0]
./londonlaw/server/Protocol.py:            GameRegistry.registry.deleteUser(username)
./londonlaw/server/Protocol.py:            client = GameRegistry.registry.getClient(username)
./londonlaw/server/Protocol.py:         if self._username == pawn.getPlayer() and self._game.isLegalMove(
./londonlaw/server/Protocol.py:            g.addPlayer(self._username)
./londonlaw/server/Protocol.py:            GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py:               self._game.syncPlayer(self._username)
./londonlaw/server/Protocol.py:      self._game.removePlayer(self._username)
./londonlaw/server/Protocol.py:      GameRegistry.registry.addUnjoinedUser(self._username)
./londonlaw/server/Protocol.py:         if self._username == pawn.getPlayer() and \
./londonlaw/server/Protocol.py:               g.addPlayer(self._username)
./londonlaw/server/Protocol.py:               GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py:                     {"gamename": name, "playername": self._username}))
./londonlaw/server/Protocol.py:#            self._username = args[0].decode("utf-8")
./londonlaw/server/Protocol.py:            self._username = args[0]
./londonlaw/server/Protocol.py:            if self._username == "admin":
./londonlaw/server/Protocol.py:            GameRegistry.registry.addUnjoinedUser(self._username)
./londonlaw/server/Protocol.py:                  {"playername" : self._username}))
./londonlaw/server/Protocol.py:         self._game.setTeam(self._username, args[0])
./londonlaw/server/Protocol.py:         self._game.removePlayer(self._username)
./londonlaw/server/Protocol.py:      if self._username is not None:
./londonlaw/server/Protocol.py:         GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py:            {"playername": self._username}))
./londonlaw/server/Protocol.py:   # compute a unique AI client username
./londonlaw/server/Protocol.py:      return self._username
./londonlaw/server/Protocol.py:            and self._username != self._game.getPawnByName("X").getPlayer() \
./londonlaw/server/Protocol.py:         and self._username != pawn.getPlayer() and not self._game.isSurfacingTurn():
./londonlaw/server/Protocol.py:   def sendPlayerInfo(self, username, game=None):
./londonlaw/server/Protocol.py:      pawns = [p.getName() for p in game.getPawnsForPlayer(username)]
./londonlaw/server/Protocol.py:         vote = str(GameRegistry.registry.getClient(username).getVote())
./londonlaw/server/Protocol.py:#      self.sendUntagged( "playerinfo", username.encode("utf-8"),
./londonlaw/server/Protocol.py:      self.sendUntagged( "playerinfo", username,
./londonlaw/server/Protocol.py:         game.getTeam(username).getName(), vote, pawnToken)
./londonlaw/server/Protocol.py:   def sendPlayerLeave(self, username):
./londonlaw/server/Protocol.py:      self.sendUntagged("playerleave", username)
./londonlaw/server/Protocol.py:#      self.sendUntagged("playerleave", username.encode("utf-8"))
./londonlaw/server/Protocol.py:   def __init__(self, username):
./londonlaw/server/Protocol.py:      self._username = username
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendHistory()
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPawnInfo()
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("turnnum", repr(num))
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("turn", pawn.getName())
./londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username)._state = "playing"
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("gamestart")
./londonlaw/server/Protocol.py:         GameRegistry.registry.getClient(self._username).sendUntagged("move", 
./londonlaw/server/Protocol.py:         GameRegistry.registry.getClient(self._username).sendUntagged(
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("stuck", pawn.getName())
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerLeave(player)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player)
./londonlaw/server/Protocol.py:#      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player.encode("utf-8"))
./londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/GameRegistry.py:#   * self._users is a dict that maps username to (password, last IP address)
./londonlaw/server/GameRegistry.py:#   * self._clients is a dict that maps username to protocol instance
./londonlaw/server/GameRegistry.py:#   * self._unjoinedUsers is a Set of player usernames that are not
./londonlaw/server/GameRegistry.py:   def addUnjoinedUser(self, username):
./londonlaw/server/GameRegistry.py:#      print("add user="+username)
./londonlaw/server/GameRegistry.py:      self._unjoinedUsers.add(username)
./londonlaw/server/GameRegistry.py:   def deleteUser(self, username):
./londonlaw/server/GameRegistry.py:      del self._users[username]
./londonlaw/server/GameRegistry.py:   def getClient(self, username):
./londonlaw/server/GameRegistry.py:      return self._clients[username]
./londonlaw/server/GameRegistry.py:   def getLastAddress(self, username):
./londonlaw/server/GameRegistry.py:      return self._users[username][1]
./londonlaw/server/GameRegistry.py:   def getPassword(self, username):
./londonlaw/server/GameRegistry.py:      if username == "admin":
./londonlaw/server/GameRegistry.py:         return self._users[username][0]
./londonlaw/server/GameRegistry.py:   def registerUser(self, username, password, address):
./londonlaw/server/GameRegistry.py:      if username == "admin":
./londonlaw/server/GameRegistry.py:      elif username not in self._users:
./londonlaw/server/GameRegistry.py:         self._users[username] = (password, address)
./londonlaw/server/GameRegistry.py:         if username in self._clients:
./londonlaw/server/GameRegistry.py:            raise UserError(N_("That username is in use."))
./londonlaw/server/GameRegistry.py:         elif password != self._users[username][0]:
./londonlaw/server/GameRegistry.py:            self._users[username] = (password, address)
./londonlaw/server/GameRegistry.py:   def removeUnjoinedUser(self, username):
./londonlaw/server/GameRegistry.py:         self._unjoinedUsers.remove(username)
./londonlaw/server/GameRegistry.py:   def removePassword(self, username):
./londonlaw/server/GameRegistry.py:      (oldPass, oldIP) = self._users[username]
./londonlaw/server/GameRegistry.py:      self._users[username] = (None, oldIP)
./londonlaw/server/GameRegistry.py:   def setPassword(self, username, password):
./londonlaw/server/GameRegistry.py:      (oldPass, oldIP) = self._users[username]
./londonlaw/server/GameRegistry.py:      self._users[username] = (password, oldIP)
./londonlaw/server/GameRegistry.py:   def unRegisterUser(self, username):
./londonlaw/server/GameRegistry.py:      if username in self._users:
./londonlaw/server/GameRegistry.py:         del self._users[username]
Übereinstimmungen in Binärdatei ./londonlaw/server/games_db.0.3.0pre2
./londonlaw/server/Game.py:# Vocabulary: a 'player' is a username.  GameRegistry.registry.getClient(player) is the
./londonlaw/server/Game.py:#             Protocol instance associated with that username, if one exists.
./londonlaw/server/Game.py:   def syncPlayer(self, username):
./londonlaw/server/Game.py:         if self._listeners[listener] == username:
Übereinstimmungen in Binärdatei ./londonlaw/server/__pycache__/Protocol.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/server/__pycache__/Game.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/server/__pycache__/GameRegistry.cpython-38.pyc
./londonlaw/server/GameRegistry.py~:#   * self._users is a dict that maps username to (password, last IP address)
./londonlaw/server/GameRegistry.py~:#   * self._clients is a dict that maps username to protocol instance
./londonlaw/server/GameRegistry.py~:#   * self._unjoinedUsers is a Set of player usernames that are not
./londonlaw/server/GameRegistry.py~:   def addUnjoinedUser(self, username):
./londonlaw/server/GameRegistry.py~:#      print("add user="+username)
./londonlaw/server/GameRegistry.py~:      self._unjoinedUsers.add(username)
./londonlaw/server/GameRegistry.py~:   def deleteUser(self, username):
./londonlaw/server/GameRegistry.py~:      del self._users[username]
./londonlaw/server/GameRegistry.py~:   def getClient(self, username):
./londonlaw/server/GameRegistry.py~:      return self._clients[username]
./londonlaw/server/GameRegistry.py~:   def getLastAddress(self, username):
./londonlaw/server/GameRegistry.py~:      return self._users[username][1]
./londonlaw/server/GameRegistry.py~:   def getPassword(self, username):
./londonlaw/server/GameRegistry.py~:      if username == "admin":
./londonlaw/server/GameRegistry.py~:         return self._users[username][0]
./londonlaw/server/GameRegistry.py~:   def registerUser(self, username, password, address):
./londonlaw/server/GameRegistry.py~:      if username == "admin":
./londonlaw/server/GameRegistry.py~:      elif username not in self._users:
./londonlaw/server/GameRegistry.py~:         self._users[username] = (password, address)
./londonlaw/server/GameRegistry.py~:         if username in self._clients:
./londonlaw/server/GameRegistry.py~:            raise UserError(N_("That username is in use."))
./londonlaw/server/GameRegistry.py~:         elif password != self._users[username][0]:
./londonlaw/server/GameRegistry.py~:            self._users[username] = (password, address)
./londonlaw/server/GameRegistry.py~:   def removeUnjoinedUser(self, username):
./londonlaw/server/GameRegistry.py~:         self._unjoinedUsers.remove(username)
./londonlaw/server/GameRegistry.py~:   def removePassword(self, username):
./londonlaw/server/GameRegistry.py~:      (oldPass, oldIP) = self._users[username]
./londonlaw/server/GameRegistry.py~:      self._users[username] = (None, oldIP)
./londonlaw/server/GameRegistry.py~:   def setPassword(self, username, password):
./londonlaw/server/GameRegistry.py~:      (oldPass, oldIP) = self._users[username]
./londonlaw/server/GameRegistry.py~:      self._users[username] = (password, oldIP)
./londonlaw/server/GameRegistry.py~:   def unRegisterUser(self, username):
./londonlaw/server/GameRegistry.py~:      if username in self._users:
./londonlaw/server/GameRegistry.py~:         del self._users[username]
./londonlaw/server/Protocol.py~:   "player"  : client has provided a username, but has not joined a game
./londonlaw/server/Protocol.py~:      self._username        = None
./londonlaw/server/Protocol.py~:#               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username.encode("utf-8"), args[0])
./londonlaw/server/Protocol.py~:               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username, args[0])
./londonlaw/server/Protocol.py~:         for player in self._game.getTeam(self._username).getPlayers():
./londonlaw/server/Protocol.py~:#               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username.encode("utf-8"), args[0])
./londonlaw/server/Protocol.py~:               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username, args[0])
./londonlaw/server/Protocol.py~:#         username = args[0].decode("utf-8")
./londonlaw/server/Protocol.py~:         username = args[0]
./londonlaw/server/Protocol.py~:            GameRegistry.registry.deleteUser(username)
./londonlaw/server/Protocol.py~:            client = GameRegistry.registry.getClient(username)
./londonlaw/server/Protocol.py~:         if self._username == pawn.getPlayer() and self._game.isLegalMove(
./londonlaw/server/Protocol.py~:            g.addPlayer(self._username)
./londonlaw/server/Protocol.py~:            GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py~:               self._game.syncPlayer(self._username)
./londonlaw/server/Protocol.py~:      self._game.removePlayer(self._username)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.addUnjoinedUser(self._username)
./londonlaw/server/Protocol.py~:         if self._username == pawn.getPlayer() and \
./londonlaw/server/Protocol.py~:               g.addPlayer(self._username)
./londonlaw/server/Protocol.py~:               GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py~:                     {"gamename": name, "playername": self._username}))
./londonlaw/server/Protocol.py~:#            self._username = args[0].decode("utf-8")
./londonlaw/server/Protocol.py~:            self._username = args[0]
./londonlaw/server/Protocol.py~:            if self._username == "admin":
./londonlaw/server/Protocol.py~:            GameRegistry.registry.addUnjoinedUser(self._username)
./londonlaw/server/Protocol.py~:                  {"playername" : self._username}))
./londonlaw/server/Protocol.py~:         self._game.setTeam(self._username, args[0])
./londonlaw/server/Protocol.py~:         self._game.removePlayer(self._username)
./londonlaw/server/Protocol.py~:      if self._username is not None:
./londonlaw/server/Protocol.py~:         GameRegistry.registry.removeUnjoinedUser(self._username)
./londonlaw/server/Protocol.py~:            {"playername": self._username}))
./londonlaw/server/Protocol.py~:   # compute a unique AI client username
./londonlaw/server/Protocol.py~:      return self._username
./londonlaw/server/Protocol.py~:            and self._username != self._game.getPawnByName("X").getPlayer() \
./londonlaw/server/Protocol.py~:         and self._username != pawn.getPlayer() and not self._game.isSurfacingTurn():
./londonlaw/server/Protocol.py~:   def sendPlayerInfo(self, username, game=None):
./londonlaw/server/Protocol.py~:      pawns = [p.getName() for p in game.getPawnsForPlayer(username)]
./londonlaw/server/Protocol.py~:         vote = str(GameRegistry.registry.getClient(username).getVote())
./londonlaw/server/Protocol.py~:#      self.sendUntagged( "playerinfo", username.encode("utf-8"),
./londonlaw/server/Protocol.py~:      self.sendUntagged( "playerinfo", username,
./londonlaw/server/Protocol.py~:         game.getTeam(username).getName(), vote, pawnToken)
./londonlaw/server/Protocol.py~:   def sendPlayerLeave(self, username):
./londonlaw/server/Protocol.py~:      self.sendUntagged("playerleave", username)
./londonlaw/server/Protocol.py~:#      self.sendUntagged("playerleave", username.encode("utf-8"))
./londonlaw/server/Protocol.py~:   def __init__(self, username):
./londonlaw/server/Protocol.py~:      self._username = username
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendHistory()
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPawnInfo()
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendUntagged("turnnum", repr(num))
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendUntagged("turn", pawn.getName())
./londonlaw/server/Protocol.py~:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py~:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py~:      client = GameRegistry.registry.getClient(self._username)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username)._state = "playing"
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendUntagged("gamestart")
./londonlaw/server/Protocol.py~:         GameRegistry.registry.getClient(self._username).sendUntagged("move", 
./londonlaw/server/Protocol.py~:         GameRegistry.registry.getClient(self._username).sendUntagged(
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendUntagged("stuck", pawn.getName())
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerLeave(player)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player)
./londonlaw/server/Protocol.py~:#      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player.encode("utf-8"))
./londonlaw/server/Protocol.py~:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./londonlaw/guiclient/__init__.py~:   def startGame(self, username, playerList, event = None):
./londonlaw/guiclient/__init__.py~:      self.mainFrame = MainWindow(None, -1, _("London Law"), username, playerList, 
./londonlaw/guiclient/__init__.py~:      username = self.connectFrame.usernameEntry.GetValue()
./londonlaw/guiclient/__init__.py~:      elif len(username) < 1:
./londonlaw/guiclient/__init__.py~:         self.connectFrame.status.PushStatusText(_("You must enter a valid username."))
./londonlaw/guiclient/__init__.py~:         messenger.setUsername(username)
./londonlaw/guiclient/__init__.py:   def startGame(self, username, playerList, event = None):
./londonlaw/guiclient/__init__.py:      self.mainFrame = MainWindow(None, -1, _("London Law"), username, playerList, 
./londonlaw/guiclient/__init__.py:      username = self.connectFrame.usernameEntry.GetValue()
./londonlaw/guiclient/__init__.py:      elif len(username) < 1:
./londonlaw/guiclient/__init__.py:         self.connectFrame.status.PushStatusText(_("You must enter a valid username."))
./londonlaw/guiclient/__init__.py:         messenger.setUsername(username)
./londonlaw/guiclient/GuiNetMessenger.py:      return self._username
./londonlaw/guiclient/GuiNetMessenger.py:      self._mainWindow    = self._launchMainWindow(self._username, pawnInfo)
./londonlaw/guiclient/GuiNetMessenger.py:   def setUsername(self, username):
./londonlaw/guiclient/GuiNetMessenger.py:      print("setusername")
./londonlaw/guiclient/GuiNetMessenger.py:      print(username)   	
./londonlaw/guiclient/GuiNetMessenger.py:      self._username = username
./londonlaw/guiclient/ConnectWindow.py~:# enter server information and provide usernames.
./londonlaw/guiclient/ConnectWindow.py~:      self.usernameEntryLabel = wx.StaticText(mainPanel, -1, _("username:"), wx.Point(0,0))
./londonlaw/guiclient/ConnectWindow.py~:      self.usernameEntry = wx.TextCtrl(mainPanel, -1, self.defaultUsername)
./londonlaw/guiclient/ConnectWindow.py~:      self.usernameEntry.SetMaxLength(20)
./londonlaw/guiclient/ConnectWindow.py~:      userSizer.Add(self.usernameEntryLabel, 0, wx.ALIGN_CENTRE)
./londonlaw/guiclient/ConnectWindow.py~:      userSizer.Add(self.usernameEntry, 0, wx.ALIGN_CENTRE | wx.ALL, 5)
./londonlaw/guiclient/ConnectWindow.py~:#      wx.EVT_SET_FOCUS(self.usernameEntry, self.selectFocused)
./londonlaw/guiclient/ConnectWindow.py~:      self.usernameEntry.Bind(wx.EVT_SET_FOCUS, self.selectFocused)
./londonlaw/guiclient/ConnectWindow.py~:      self.usernameEntry.SetSelection(0,0)
./londonlaw/guiclient/ConnectWindow.py~:      if (ev.GetId() == self.usernameEntry.GetId() and 
./londonlaw/guiclient/ConnectWindow.py~:            len(self.usernameEntry.GetValue()) > 0):
./londonlaw/guiclient/ConnectWindow.py~:         self.usernameEntry.SetSelection(-1, -1)
./londonlaw/guiclient/RegistrationWindow.py~:      print(messenger._username)   	
./londonlaw/guiclient/MapWindow.py:   def __init__(self, parent, usernameList):
./londonlaw/guiclient/MapWindow.py:      print(usernameList)    	
./londonlaw/guiclient/MapWindow.py:         self.labels.append(TextPanel(self, " " + usernameList[i][:20] + " ", 10, wx.SIMPLE_BORDER))
./londonlaw/guiclient/ConnectWindow.py:# enter server information and provide usernames.
./londonlaw/guiclient/ConnectWindow.py:      self.usernameEntryLabel = wx.StaticText(mainPanel, -1, _("username:"), wx.Point(0,0))
./londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry = wx.TextCtrl(mainPanel, -1, self.defaultUsername)
./londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.SetMaxLength(20)
./londonlaw/guiclient/ConnectWindow.py:      userSizer.Add(self.usernameEntryLabel, 0, wx.ALIGN_CENTRE)
./londonlaw/guiclient/ConnectWindow.py:      userSizer.Add(self.usernameEntry, 0, wx.ALIGN_CENTRE | wx.ALL, 5)
./londonlaw/guiclient/ConnectWindow.py:#      wx.EVT_SET_FOCUS(self.usernameEntry, self.selectFocused)
./londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.Bind(wx.EVT_SET_FOCUS, self.selectFocused)
./londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.SetSelection(0,0)
./londonlaw/guiclient/ConnectWindow.py:      if (ev.GetId() == self.usernameEntry.GetId() and 
./londonlaw/guiclient/ConnectWindow.py:            len(self.usernameEntry.GetValue()) > 0):
./londonlaw/guiclient/ConnectWindow.py:         self.usernameEntry.SetSelection(-1, -1)
./londonlaw/guiclient/MainWindow.py:   def __init__(self, parent, ID, title, username, playerList, messenger, exitCallback):
./londonlaw/guiclient/MainWindow.py:      self.username         = username
./londonlaw/guiclient/MainWindow.py:      self.isMrX = (username == self.playerList[0][0])
./londonlaw/guiclient/MainWindow.py:      usernameList = []
./londonlaw/guiclient/MainWindow.py:         usernameList.append(p[0])
./londonlaw/guiclient/MainWindow.py:      self.mapWindow = MapWindow(self.panel, usernameList)
./londonlaw/guiclient/MainWindow.py:      self.icons = PlayerIconGroup(self.panel, usernameList, tokenList)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[0][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[0][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is Mr. X's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[1][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[1][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Red Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[2][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[2][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Yellow Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[3][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[3][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Green Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[4][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[4][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Blue Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py:         if self.playerList[5][0] == self.username:
./londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[5][0]
./londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Black Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MapWindow.py~:   def __init__(self, parent, usernameList):
./londonlaw/guiclient/MapWindow.py~:      print(usernameList)    	
./londonlaw/guiclient/MapWindow.py~:         self.labels.append(TextPanel(self, " " + usernameList[i][:20] + " ", 10, wx.SIMPLE_BORDER))
./londonlaw/guiclient/RegistrationWindow.py:      print(messenger._username)   	
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/GuiNetMessenger.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/RegistrationWindow.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/MainWindow.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/MapWindow.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/ConnectWindow.cpython-38.pyc
Übereinstimmungen in Binärdatei ./londonlaw/guiclient/__pycache__/__init__.cpython-38.pyc
./londonlaw/guiclient/MainWindow.py~:   def __init__(self, parent, ID, title, username, playerList, messenger, exitCallback):
./londonlaw/guiclient/MainWindow.py~:      self.username         = username
./londonlaw/guiclient/MainWindow.py~:      self.isMrX = (username == self.playerList[0][0])
./londonlaw/guiclient/MainWindow.py~:      usernameList = []
./londonlaw/guiclient/MainWindow.py~:         usernameList.append(p[0])
./londonlaw/guiclient/MainWindow.py~:      self.mapWindow = MapWindow(self.panel, usernameList)
./londonlaw/guiclient/MainWindow.py~:      self.icons = PlayerIconGroup(self.panel, usernameList, tokenList)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[0][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[0][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is Mr. X's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[1][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[1][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is the Red Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[2][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[2][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is the Yellow Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[3][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[3][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is the Green Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[4][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[4][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is the Blue Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/MainWindow.py~:         if self.playerList[5][0] == self.username:
./londonlaw/guiclient/MainWindow.py~:            usernameStr = _("you")
./londonlaw/guiclient/MainWindow.py~:            usernameStr = self.playerList[5][0]
./londonlaw/guiclient/MainWindow.py~:         self.status.PushStatusText(_("It is the Black Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./londonlaw/guiclient/GuiNetMessenger.py~:      return self._username
./londonlaw/guiclient/GuiNetMessenger.py~:      self._mainWindow    = self._launchMainWindow(self._username, pawnInfo)
./londonlaw/guiclient/GuiNetMessenger.py~:   def setUsername(self, username):
./londonlaw/guiclient/GuiNetMessenger.py~:      self._username = username
./build/lib/londonlaw/aiclients/detective_simple.py:   def __init__(self, username, gameroom):
./build/lib/londonlaw/aiclients/detective_simple.py:      base.BaseAIFactory.__init__(self, username, username, gameroom, "Detectives")
./build/lib/londonlaw/aiclients/x_simple.py:   def __init__(self, username, gameroom):
./build/lib/londonlaw/aiclients/x_simple.py:      base.BaseAIFactory.__init__(self, username, username, gameroom, "Mr. X")
./build/lib/londonlaw/aiclients/base.py:      self._username = self.factory.username
./build/lib/londonlaw/aiclients/base.py:      self.sendTokens(self.genTag(), "login", self._username, self._password)
./build/lib/londonlaw/aiclients/base.py:      if p.getPlayer() == self._username:
./build/lib/londonlaw/aiclients/base.py:      username = args[0].decode("utf-8")
./build/lib/londonlaw/aiclients/base.py:      if username in self._players:
./build/lib/londonlaw/aiclients/base.py:         self._players.remove(username)
./build/lib/londonlaw/aiclients/base.py:   def __init__(self, username, password, gameroom, team):
./build/lib/londonlaw/aiclients/base.py:      self.username = username
./build/lib/londonlaw/server/Protocol.py:   "player"  : client has provided a username, but has not joined a game
./build/lib/londonlaw/server/Protocol.py:      self._username        = None
./build/lib/londonlaw/server/Protocol.py:#               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username.encode("utf-8"), args[0])
./build/lib/londonlaw/server/Protocol.py:               GameRegistry.registry.getClient(player).sendUntagged("chatall", self._username, args[0])
./build/lib/londonlaw/server/Protocol.py:         for player in self._game.getTeam(self._username).getPlayers():
./build/lib/londonlaw/server/Protocol.py:#               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username.encode("utf-8"), args[0])
./build/lib/londonlaw/server/Protocol.py:               GameRegistry.registry.getClient(player).sendUntagged("chatteam", self._username, args[0])
./build/lib/londonlaw/server/Protocol.py:#         username = args[0].decode("utf-8")
./build/lib/londonlaw/server/Protocol.py:         username = args[0]
./build/lib/londonlaw/server/Protocol.py:            GameRegistry.registry.deleteUser(username)
./build/lib/londonlaw/server/Protocol.py:            client = GameRegistry.registry.getClient(username)
./build/lib/londonlaw/server/Protocol.py:         if self._username == pawn.getPlayer() and self._game.isLegalMove(
./build/lib/londonlaw/server/Protocol.py:            g.addPlayer(self._username)
./build/lib/londonlaw/server/Protocol.py:            GameRegistry.registry.removeUnjoinedUser(self._username)
./build/lib/londonlaw/server/Protocol.py:               self._game.syncPlayer(self._username)
./build/lib/londonlaw/server/Protocol.py:      self._game.removePlayer(self._username)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.addUnjoinedUser(self._username)
./build/lib/londonlaw/server/Protocol.py:         if self._username == pawn.getPlayer() and \
./build/lib/londonlaw/server/Protocol.py:               g.addPlayer(self._username)
./build/lib/londonlaw/server/Protocol.py:               GameRegistry.registry.removeUnjoinedUser(self._username)
./build/lib/londonlaw/server/Protocol.py:                     {"gamename": name, "playername": self._username}))
./build/lib/londonlaw/server/Protocol.py:#            self._username = args[0].decode("utf-8")
./build/lib/londonlaw/server/Protocol.py:            self._username = args[0]
./build/lib/londonlaw/server/Protocol.py:            if self._username == "admin":
./build/lib/londonlaw/server/Protocol.py:            GameRegistry.registry.addUnjoinedUser(self._username)
./build/lib/londonlaw/server/Protocol.py:                  {"playername" : self._username}))
./build/lib/londonlaw/server/Protocol.py:         self._game.setTeam(self._username, args[0])
./build/lib/londonlaw/server/Protocol.py:         self._game.removePlayer(self._username)
./build/lib/londonlaw/server/Protocol.py:      if self._username is not None:
./build/lib/londonlaw/server/Protocol.py:         GameRegistry.registry.removeUnjoinedUser(self._username)
./build/lib/londonlaw/server/Protocol.py:            {"playername": self._username}))
./build/lib/londonlaw/server/Protocol.py:   # compute a unique AI client username
./build/lib/londonlaw/server/Protocol.py:      return self._username
./build/lib/londonlaw/server/Protocol.py:            and self._username != self._game.getPawnByName("X").getPlayer() \
./build/lib/londonlaw/server/Protocol.py:         and self._username != pawn.getPlayer() and not self._game.isSurfacingTurn():
./build/lib/londonlaw/server/Protocol.py:   def sendPlayerInfo(self, username, game=None):
./build/lib/londonlaw/server/Protocol.py:      pawns = [p.getName() for p in game.getPawnsForPlayer(username)]
./build/lib/londonlaw/server/Protocol.py:         vote = str(GameRegistry.registry.getClient(username).getVote())
./build/lib/londonlaw/server/Protocol.py:#      self.sendUntagged( "playerinfo", username.encode("utf-8"),
./build/lib/londonlaw/server/Protocol.py:      self.sendUntagged( "playerinfo", username,
./build/lib/londonlaw/server/Protocol.py:         game.getTeam(username).getName(), vote, pawnToken)
./build/lib/londonlaw/server/Protocol.py:   def sendPlayerLeave(self, username):
./build/lib/londonlaw/server/Protocol.py:      self.sendUntagged("playerleave", username)
./build/lib/londonlaw/server/Protocol.py:#      self.sendUntagged("playerleave", username.encode("utf-8"))
./build/lib/londonlaw/server/Protocol.py:   def __init__(self, username):
./build/lib/londonlaw/server/Protocol.py:      self._username = username
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendHistory()
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPawnInfo()
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("turnnum", repr(num))
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("turn", pawn.getName())
./build/lib/londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./build/lib/londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./build/lib/londonlaw/server/Protocol.py:      client = GameRegistry.registry.getClient(self._username)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username)._state = "playing"
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("gamestart")
./build/lib/londonlaw/server/Protocol.py:         GameRegistry.registry.getClient(self._username).sendUntagged("move", 
./build/lib/londonlaw/server/Protocol.py:         GameRegistry.registry.getClient(self._username).sendUntagged(
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("stuck", pawn.getName())
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerLeave(player)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player)
./build/lib/londonlaw/server/Protocol.py:#      GameRegistry.registry.getClient(self._username).sendUntagged("rejoin", player.encode("utf-8"))
./build/lib/londonlaw/server/Protocol.py:      GameRegistry.registry.getClient(self._username).sendPlayerInfo(player)
./build/lib/londonlaw/server/GameRegistry.py:#   * self._users is a dict that maps username to (password, last IP address)
./build/lib/londonlaw/server/GameRegistry.py:#   * self._clients is a dict that maps username to protocol instance
./build/lib/londonlaw/server/GameRegistry.py:#   * self._unjoinedUsers is a Set of player usernames that are not
./build/lib/londonlaw/server/GameRegistry.py:   def addUnjoinedUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py:#      print("add user="+username)
./build/lib/londonlaw/server/GameRegistry.py:      self._unjoinedUsers.add(username)
./build/lib/londonlaw/server/GameRegistry.py:   def deleteUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      del self._users[username]
./build/lib/londonlaw/server/GameRegistry.py:   def getClient(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      return self._clients[username]
./build/lib/londonlaw/server/GameRegistry.py:   def getLastAddress(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      return self._users[username][1]
./build/lib/londonlaw/server/GameRegistry.py:   def getPassword(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      if username == "admin":
./build/lib/londonlaw/server/GameRegistry.py:         return self._users[username][0]
./build/lib/londonlaw/server/GameRegistry.py:   def registerUser(self, username, password, address):
./build/lib/londonlaw/server/GameRegistry.py:      if username == "admin":
./build/lib/londonlaw/server/GameRegistry.py:      elif username not in self._users:
./build/lib/londonlaw/server/GameRegistry.py:         self._users[username] = (password, address)
./build/lib/londonlaw/server/GameRegistry.py:         if username in self._clients:
./build/lib/londonlaw/server/GameRegistry.py:            raise UserError(N_("That username is in use."))
./build/lib/londonlaw/server/GameRegistry.py:         elif password != self._users[username][0]:
./build/lib/londonlaw/server/GameRegistry.py:            self._users[username] = (password, address)
./build/lib/londonlaw/server/GameRegistry.py:   def removeUnjoinedUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py:         self._unjoinedUsers.remove(username)
./build/lib/londonlaw/server/GameRegistry.py:   def removePassword(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      (oldPass, oldIP) = self._users[username]
./build/lib/londonlaw/server/GameRegistry.py:      self._users[username] = (None, oldIP)
./build/lib/londonlaw/server/GameRegistry.py:   def setPassword(self, username, password):
./build/lib/londonlaw/server/GameRegistry.py:      (oldPass, oldIP) = self._users[username]
./build/lib/londonlaw/server/GameRegistry.py:      self._users[username] = (password, oldIP)
./build/lib/londonlaw/server/GameRegistry.py:   def unRegisterUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py:      if username in self._users:
./build/lib/londonlaw/server/GameRegistry.py:         del self._users[username]
./build/lib/londonlaw/server/Game.py:# Vocabulary: a 'player' is a username.  GameRegistry.registry.getClient(player) is the
./build/lib/londonlaw/server/Game.py:#             Protocol instance associated with that username, if one exists.
./build/lib/londonlaw/server/Game.py:   def syncPlayer(self, username):
./build/lib/londonlaw/server/Game.py:         if self._listeners[listener] == username:
./build/lib/londonlaw/server/GameRegistry.py~:#   * self._users is a dict that maps username to (password, last IP address)
./build/lib/londonlaw/server/GameRegistry.py~:#   * self._clients is a dict that maps username to protocol instance
./build/lib/londonlaw/server/GameRegistry.py~:#   * self._unjoinedUsers is a Set of player usernames that are not
./build/lib/londonlaw/server/GameRegistry.py~:   def addUnjoinedUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      self._unjoinedUsers.add(username)
./build/lib/londonlaw/server/GameRegistry.py~:   def deleteUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      del self._users[username]
./build/lib/londonlaw/server/GameRegistry.py~:   def getClient(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      return self._clients[username]
./build/lib/londonlaw/server/GameRegistry.py~:   def getLastAddress(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      return self._users[username][1]
./build/lib/londonlaw/server/GameRegistry.py~:   def getPassword(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      if username == "admin":
./build/lib/londonlaw/server/GameRegistry.py~:         return self._users[username][0]
./build/lib/londonlaw/server/GameRegistry.py~:   def registerUser(self, username, password, address):
./build/lib/londonlaw/server/GameRegistry.py~:      print("username="+username+", type="+type(username))   	
./build/lib/londonlaw/server/GameRegistry.py~:      if username == "admin":
./build/lib/londonlaw/server/GameRegistry.py~:      elif not self._users.has_key(username):
./build/lib/londonlaw/server/GameRegistry.py~:         self._users[username] = (password, address)
./build/lib/londonlaw/server/GameRegistry.py~:         if self._clients.has_key(username):
./build/lib/londonlaw/server/GameRegistry.py~:            raise UserError(N_("That username is in use."))
./build/lib/londonlaw/server/GameRegistry.py~:         elif password != self._users[username][0]:
./build/lib/londonlaw/server/GameRegistry.py~:            self._users[username] = (password, address)
./build/lib/londonlaw/server/GameRegistry.py~:   def removeUnjoinedUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:         self._unjoinedUsers.remove(username)
./build/lib/londonlaw/server/GameRegistry.py~:   def removePassword(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      (oldPass, oldIP) = self._users[username]
./build/lib/londonlaw/server/GameRegistry.py~:      self._users[username] = (None, oldIP)
./build/lib/londonlaw/server/GameRegistry.py~:   def setPassword(self, username, password):
./build/lib/londonlaw/server/GameRegistry.py~:      (oldPass, oldIP) = self._users[username]
./build/lib/londonlaw/server/GameRegistry.py~:      self._users[username] = (password, oldIP)
./build/lib/londonlaw/server/GameRegistry.py~:   def unRegisterUser(self, username):
./build/lib/londonlaw/server/GameRegistry.py~:      if self._users.has_key(username):
./build/lib/londonlaw/server/GameRegistry.py~:         del self._users[username]
./build/lib/londonlaw/guiclient/__init__.py:   def startGame(self, username, playerList, event = None):
./build/lib/londonlaw/guiclient/__init__.py:      self.mainFrame = MainWindow(None, -1, _("London Law"), username, playerList, 
./build/lib/londonlaw/guiclient/__init__.py:      username = self.connectFrame.usernameEntry.GetValue()
./build/lib/londonlaw/guiclient/__init__.py:      elif len(username) < 1:
./build/lib/londonlaw/guiclient/__init__.py:         self.connectFrame.status.PushStatusText(_("You must enter a valid username."))
./build/lib/londonlaw/guiclient/__init__.py:         messenger.setUsername(username)
./build/lib/londonlaw/guiclient/GuiNetMessenger.py:      return self._username
./build/lib/londonlaw/guiclient/GuiNetMessenger.py:      self._mainWindow    = self._launchMainWindow(self._username, pawnInfo)
./build/lib/londonlaw/guiclient/GuiNetMessenger.py:   def setUsername(self, username):
./build/lib/londonlaw/guiclient/GuiNetMessenger.py:      self._username = username
./build/lib/londonlaw/guiclient/MapWindow.py:   def __init__(self, parent, usernameList):
./build/lib/londonlaw/guiclient/MapWindow.py:         self.labels.append(TextPanel(self, " " + usernameList[i][:20] + " ", 10, wx.SIMPLE_BORDER))
./build/lib/londonlaw/guiclient/ConnectWindow.py:# enter server information and provide usernames.
./build/lib/londonlaw/guiclient/ConnectWindow.py:      self.usernameEntryLabel = wx.StaticText(mainPanel, -1, _("username:"), wx.Point(0,0))
./build/lib/londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry = wx.TextCtrl(mainPanel, -1, self.defaultUsername)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.SetMaxLength(20)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      userSizer.Add(self.usernameEntryLabel, 0, wx.ALIGN_CENTRE)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      userSizer.Add(self.usernameEntry, 0, wx.ALIGN_CENTRE | wx.ALL, 5)
./build/lib/londonlaw/guiclient/ConnectWindow.py:#      wx.EVT_SET_FOCUS(self.usernameEntry, self.selectFocused)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.Bind(wx.EVT_SET_FOCUS, self.selectFocused)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      self.usernameEntry.SetSelection(0,0)
./build/lib/londonlaw/guiclient/ConnectWindow.py:      if (ev.GetId() == self.usernameEntry.GetId() and 
./build/lib/londonlaw/guiclient/ConnectWindow.py:            len(self.usernameEntry.GetValue()) > 0):
./build/lib/londonlaw/guiclient/ConnectWindow.py:         self.usernameEntry.SetSelection(-1, -1)
./build/lib/londonlaw/guiclient/MainWindow.py:   def __init__(self, parent, ID, title, username, playerList, messenger, exitCallback):
./build/lib/londonlaw/guiclient/MainWindow.py:      self.username         = username
./build/lib/londonlaw/guiclient/MainWindow.py:      self.isMrX = (username == self.playerList[0][0])
./build/lib/londonlaw/guiclient/MainWindow.py:      usernameList = []
./build/lib/londonlaw/guiclient/MainWindow.py:         usernameList.append(p[0])
./build/lib/londonlaw/guiclient/MainWindow.py:      self.mapWindow = MapWindow(self.panel, usernameList)
./build/lib/londonlaw/guiclient/MainWindow.py:      self.icons = PlayerIconGroup(self.panel, usernameList, tokenList)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[0][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[0][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is Mr. X's turn (%(username)s).") % {"username" : usernameStr}, 0)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[1][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[1][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Red Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[2][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[2][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Yellow Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[3][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[3][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Green Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[4][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[4][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Blue Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
./build/lib/londonlaw/guiclient/MainWindow.py:         if self.playerList[5][0] == self.username:
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = _("you")
./build/lib/londonlaw/guiclient/MainWindow.py:            usernameStr = self.playerList[5][0]
./build/lib/londonlaw/guiclient/MainWindow.py:         self.status.PushStatusText(_("It is the Black Detective's turn (%(username)s).") % {"username" : usernameStr}, 0)
